/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Wed Oct 26 00:46:08 2016. */

#ifndef PB_CONTROL_STATE_PB_H_INCLUDED
#define PB_CONTROL_STATE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _px4_control_state_pb_AIRSPD_MODE {
    px4_control_state_pb_AIRSPD_MODE_AIRSPD_MODE_MEAS = 0,
    px4_control_state_pb_AIRSPD_MODE_AIRSPD_MODE_EST = 1,
    px4_control_state_pb_AIRSPD_MODE_AIRSPD_MODE_DISABLED = 2
} px4_control_state_pb_AIRSPD_MODE;
#define _px4_control_state_pb_AIRSPD_MODE_MIN px4_control_state_pb_AIRSPD_MODE_AIRSPD_MODE_MEAS
#define _px4_control_state_pb_AIRSPD_MODE_MAX px4_control_state_pb_AIRSPD_MODE_AIRSPD_MODE_DISABLED
#define _px4_control_state_pb_AIRSPD_MODE_ARRAYSIZE ((px4_control_state_pb_AIRSPD_MODE)(px4_control_state_pb_AIRSPD_MODE_AIRSPD_MODE_DISABLED+1))

/* Struct definitions */
typedef struct _px4_control_state_pb {
    uint64_t timestamp;
    float x_acc;
    float y_acc;
    float z_acc;
    float x_vel;
    float y_vel;
    float z_vel;
    float x_pos;
    float y_pos;
    float z_pos;
    float airspeed;
    pb_size_t vel_variance_count;
    float vel_variance[3];
    pb_size_t pos_variance_count;
    float pos_variance[3];
    pb_size_t q_count;
    float q[4];
    float roll_rate;
    float pitch_rate;
    float yaw_rate;
    float horz_acc_mag;
    bool airspeed_valid;
/* @@protoc_insertion_point(struct:px4_control_state_pb) */
} px4_control_state_pb;

/* Default values for struct fields */

/* Initializer values for message structs */
#define px4_control_state_pb_init_default        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0, 0}, 0, 0, 0, 0, 0}
#define px4_control_state_pb_init_zero           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0, 0}, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define px4_control_state_pb_timestamp_tag       1
#define px4_control_state_pb_x_acc_tag           2
#define px4_control_state_pb_y_acc_tag           3
#define px4_control_state_pb_z_acc_tag           4
#define px4_control_state_pb_x_vel_tag           5
#define px4_control_state_pb_y_vel_tag           6
#define px4_control_state_pb_z_vel_tag           7
#define px4_control_state_pb_x_pos_tag           8
#define px4_control_state_pb_y_pos_tag           9
#define px4_control_state_pb_z_pos_tag           10
#define px4_control_state_pb_airspeed_tag        11
#define px4_control_state_pb_vel_variance_tag    12
#define px4_control_state_pb_pos_variance_tag    13
#define px4_control_state_pb_q_tag               14
#define px4_control_state_pb_roll_rate_tag       15
#define px4_control_state_pb_pitch_rate_tag      16
#define px4_control_state_pb_yaw_rate_tag        17
#define px4_control_state_pb_horz_acc_mag_tag    18
#define px4_control_state_pb_airspeed_valid_tag  19

/* Struct field encoding specification for nanopb */
extern const pb_field_t px4_control_state_pb_fields[20];

/* Maximum encoded size of messages (where known) */
#define px4_control_state_pb_size                137

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CONTROL_STATE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
