/****************************************************************************
 *
 *   Copyright (c) 2012-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

#include "SimpleMixer.h"
#include <math.h>
#include <string.h>
#include <math/Limits.hpp>
#include <float.h>

// This file is generated by the multi_tables script which is invoked during the build process
//#include "simple_multirotor.generated.h"

/*
 * Clockwise: 1
 * Counter-clockwise: -1
 */

SimpleMixer::SimpleMixer(
	ControlCallback control_cb,
	cpuaddr cb_handle) :
    	Mixer(control_cb, cb_handle),
		m_ThrustFactor(0.0f)
{
//    memset(&m_SaturationStatus, 0, sizeof(m_SaturationStatus));
}

SimpleMixer::~SimpleMixer()
{
}


float SimpleMixer::Contrain(float value, float minimum, float maximum)
{
	return (value < minimum) ? minimum : ((value > maximum) ? maximum : value);
}

uint32
SimpleMixer::mix(float *outputs, uint32 space, uint16 *status_reg)
{
	return 0;
}

/*
 * This function update the control saturation status report using hte following inputs:
 *
 * index: 0 based index identifying the motor that is saturating
 * clipping_high: true if the motor demand is being limited in the positive direction
 * clipping_low: true if the motor demand is being limited in the negative direction
*/
void
SimpleMixer::update_saturation_status(uint32 index, bool clipping_high, bool clipping_low)
{
}

void
SimpleMixer::groups_required(uint32 &groups)
{
	/* XXX for now, hardcoded to indexes 0-3 in control group zero */
	groups |= (1 << 0);
}

uint16 SimpleMixer::get_saturation_status()
{
	return m_SaturationStatus.value;
}

uint32 SimpleMixer::set_trim(float trim)
{
    return 0;
}

void SimpleMixer::set_thrust_factor(float val)
{
    m_ThrustFactor = val;
}
