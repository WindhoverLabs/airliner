/****************************************************************************
 *
 *   Copyright (c) 2012-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

#include "SimpleMixer.h"
#include <math.h>
#include <string.h>
#include <math/Limits.hpp>
#include <float.h>
#include "amc_platform_cfg.h"
#include "amc_events.h"
#include "MixerTables.h"

// This file is generated by the multi_tables script which is invoked during the build process
//#include "simple_multirotor.generated.h"

/*
 * Clockwise: 1
 * Counter-clockwise: -1
 */

SimpleMixer::SimpleMixer()
{
//    memset(&m_SaturationStatus, 0, sizeof(m_SaturationStatus));
}

SimpleMixer::~SimpleMixer()
{
}


float SimpleMixer::Contrain(float value, float minimum, float maximum)
{
	return (value < minimum) ? minimum : ((value > maximum) ? maximum : value);
}


uint32 SimpleMixer::mix(float *outputs, uint32 space, uint16 *status_reg)
{
	if(m_Config->ControlCount > 0)
	{
		float sum = 0.0f;

//		if (space < 1)
//		{
//			return 0;
//		}

		for(uint32 i = 0; i < m_Config->ControlCount; i++)
		{
			float input = 0.0f;

			input = get_control(m_Config->Controls[i].ControlGroup,
								m_Config->Controls[i].ControlIndex);

			sum += scale(m_Config->Controls[i].Scaler, input);
		}

		*outputs = scale(m_Config->OutputScaler, sum);

		// Notify saturation status
		if (status_reg != nullptr)
		{
			(*status_reg) = m_SaturationStatus.value;
		}

	    return 1;
	}
	else
	{
		return 0;
	}
}


uint16 SimpleMixer::get_saturation_status()
{
	//return m_SaturationStatus.value;
	return 0;
}

void SimpleMixer::groups_required(uint32 &groups)
{
	for(uint32 i = 0; i < m_Config->ControlCount; i++)
    {
		groups |= 1 << m_Config->Controls[i].ControlGroup;
	}
}

uint32 SimpleMixer::set_trim(float trim)
{
	m_Config->OutputScaler.Offset = trim;

	return 1;
}


int32 SimpleMixer::Initialize(void)
{
	int32 status = 0;

end_of_function:
    return status;
}


int32 SimpleMixer::SetOutputScaler(AMC_Mixer_Scaler_t &OutputScaler)
{
	m_Config->OutputScaler.NegativeScale = OutputScaler.NegativeScale;
	m_Config->OutputScaler.PositiveScale = OutputScaler.PositiveScale;
	m_Config->OutputScaler.Offset = OutputScaler.Offset;
	m_Config->OutputScaler.MinOutput = OutputScaler.MinOutput;
	m_Config->OutputScaler.MaxOutput = OutputScaler.MaxOutput;

	return 0;
}


int32 SimpleMixer::SetControl(uint8 Control, uint8 Group, uint8 Index)
{
	int32 status = 0;

	if(Control >= m_Config->ControlCount)
	{
		status = -1;
		goto end_of_function;
	}

	m_Config->Controls[Control].ControlGroup = Group;
	m_Config->Controls[Control].ControlIndex = Index;

end_of_function:
    return status;
}


int32 SimpleMixer::SetControlScaler(uint8 Control, AMC_Mixer_Scaler_t Scaler)
{
	int32 status = 0;

	if(Control >= m_Config->ControlCount)
	{
		status = -1;
		goto end_of_function;
	}

	m_Config->Controls[Control].Scaler.NegativeScale = Scaler.NegativeScale;
	m_Config->Controls[Control].Scaler.PositiveScale = Scaler.PositiveScale;
	m_Config->Controls[Control].Scaler.Offset = Scaler.Offset;
	m_Config->Controls[Control].Scaler.MinOutput = Scaler.MinOutput;
	m_Config->Controls[Control].Scaler.MaxOutput = Scaler.MaxOutput;

end_of_function:
    return status;
}



int32 SimpleMixer::SetConfig(AMC_SimpleMixer_Config_t *config)
{
	m_Config = config;
}
