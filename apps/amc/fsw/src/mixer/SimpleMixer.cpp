/****************************************************************************
 *
 *   Copyright (c) 2012-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

#include "SimpleMixer.h"
#include <math.h>
#include <string.h>
#include <math/Limits.hpp>
#include <float.h>
#include "amc_platform_cfg.h"
#include "amc_events.h"

// This file is generated by the multi_tables script which is invoked during the build process
//#include "simple_multirotor.generated.h"

/*
 * Clockwise: 1
 * Counter-clockwise: -1
 */

SimpleMixer::SimpleMixer(
	ControlCallback control_cb,
	cpuaddr cb_handle) :
    	Mixer(control_cb, cb_handle)
{
//    memset(&m_SaturationStatus, 0, sizeof(m_SaturationStatus));
}

SimpleMixer::~SimpleMixer()
{
}


float SimpleMixer::Contrain(float value, float minimum, float maximum)
{
	return (value < minimum) ? minimum : ((value > maximum) ? maximum : value);
}


uint32 SimpleMixer::mix(float *outputs, uint32 space, uint16 *status_reg)
{
	float sum = 0.0f;

	if (space < 1)
	{
		return 0;
	}

	for(uint32 i = 0; i < ConfigTblPtr->ControlCount; i++)
    {
		float input = 0.0f;

		input = get_control(ConfigTblPtr->Controls[i].ControlGroup,
				            ConfigTblPtr->Controls[i].ControlIndex);

		sum += scale(ConfigTblPtr->Controls[i].Scaler, input);
	}

	*outputs = scale(ConfigTblPtr->OutputScaler, sum);

    // Notify saturation status
    if (status_reg != nullptr)
    {
        (*status_reg) = m_SaturationStatus.value;
    }

    return 1;
}


uint16 SimpleMixer::get_saturation_status()
{
	//return m_SaturationStatus.value;
	return 0;
}

void SimpleMixer::groups_required(uint32 &groups)
{
	for(uint32 i = 0; i < ConfigTblPtr->ControlCount; i++)
    {
		groups |= 1 << ConfigTblPtr->Controls[i].ControlGroup;
	}
}

uint32 SimpleMixer::set_trim(float trim)
{
	ConfigTblPtr->OutputScaler.Offset = trim;

	return 1;
}


int32 SimpleMixer::Initialize(void)
{
	int32 status;

    /* Register Mixer table */
	status = CFE_TBL_Register(&ConfigTblHdl,
			AMC_SIMPLE_MIXER_CONFIG_TABLE_FILENAME,
            (sizeof(SimpleMixer_ConfigTable_t)),
            CFE_TBL_OPT_DEFAULT,
			SimpleMixer::ValidateConfigTable);
    if(status != CFE_SUCCESS)
    {
        /* Note, a critical table could return another nominal code.  If this
         * table is made critical this logic would have to change.
         */
        CFE_EVS_SendEvent(AMC_MIXER_CFGTBL_REG_ERR_EID, CFE_EVS_ERROR,
                "Failed to register Mixer table (0x%08X)",
                (unsigned int)status);
        goto end_of_function;
    }

    /* Load Config table file */
    status = CFE_TBL_Load(ConfigTblHdl,
            CFE_TBL_SRC_FILE,
			AMC_SIMPLE_MIXER_CONFIG_TABLE_FILENAME);
    if(status != CFE_SUCCESS)
    {
        /* Note, CFE_SUCCESS is for a successful full table load.  If a
         * partial table load is desired then this logic would have to
         * change.
         */
        CFE_EVS_SendEvent(AMC_MIXER_CFGTBL_LOAD_ERR_EID, CFE_EVS_ERROR,
                "Failed to load Mixer Config Table (0x%08X)",
                (unsigned int)status);
        goto end_of_function;
    }

    status = AcquireConfigPointers();

end_of_function:
    return status;
}


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Validate Mixer Configuration Table                              */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int32 SimpleMixer::ValidateConfigTable(void* ConfigTblPtr)
{
    int32 status = 0;

AMC_ValidateMixerCfgTbl_Exit_Tag:
    return status;

}



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* Acquire Config Pointers                                         */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int32 SimpleMixer::AcquireConfigPointers(void)
{
    int32 status = CFE_SUCCESS;

    /*
     ** Release the table
     */
    /* TODO: This return value can indicate success, error, or that the info
     * has been updated.  We ignore this return value in favor of checking
     * CFE_TBL_Manage(), but be sure this is the behavior you want.
     */
    CFE_TBL_ReleaseAddress(ConfigTblHdl);

    /*
     ** Manage the table
     */
    status = CFE_TBL_Manage(ConfigTblHdl);
    if((status != CFE_SUCCESS) && (status != CFE_TBL_INFO_UPDATED))
    {
        CFE_EVS_SendEvent(AMC_CFGTBL_MANAGE_ERR_EID, CFE_EVS_ERROR,
                "Failed to manage SimpleMixer Config table (0x%08X)",
                (unsigned int)status);
        goto end_of_function;
    }

    status = CFE_TBL_Manage(ConfigTblHdl);
    if((status != CFE_SUCCESS) && (status != CFE_TBL_INFO_UPDATED))
    {
        CFE_EVS_SendEvent(AMC_MIXER_CFGTBL_MANAGE_ERR_EID, CFE_EVS_ERROR,
                "Failed to manage SimpleMixer Config table (0x%08X)",
                (unsigned int)status);
        goto end_of_function;
    }

    /*
     ** Get a pointer to the table
     */
    status = CFE_TBL_GetAddress((void**)&ConfigTblPtr,
            ConfigTblHdl);
    if(CFE_TBL_INFO_UPDATED == status)
    {
        status = CFE_SUCCESS;
    }
    else if(status != CFE_SUCCESS)
    {
        ConfigTblPtr = 0;
        CFE_EVS_SendEvent(AMC_CFGTBL_GETADDR_ERR_EID, CFE_EVS_ERROR,
                "Failed to get Config table's address (0x%08X)",
                (unsigned int)status);
    }

end_of_function:
    return status;

}
