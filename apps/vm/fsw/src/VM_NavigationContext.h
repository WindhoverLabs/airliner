//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : VM_Navigation.sm
//

#ifndef VM_NAVIGATIONCONTEXT_H
#define VM_NAVIGATIONCONTEXT_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class VM_NavigationMap;
class VM_NavigationMap_Manual;
class VM_NavigationMap_AltitudeControl;
class VM_NavigationMap_PositionControl;
class VM_NavigationMap_AutoLoiter;
class VM_NavigationMap_AutoReturnToLaunch;
class VM_NavigationMap_Acrobatic;
class VM_NavigationMap_Stabilize;
class VM_NavigationMap_Rattitude;
class VM_NavigationMap_AutoTakeoff;
class VM_NavigationMap_AutoLand;
class VM_NavigationMap_Init;
class VM_NavigationMap_Default;
class VM_NavigationState;
class VM_NavigationContext;
class VM_Navigation;

class VM_NavigationState :
    public statemap::State
{
public:

    VM_NavigationState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&) {};
    virtual void Exit(VM_NavigationContext&) {};

    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trInitComplete(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);

protected:

    virtual void Default(VM_NavigationContext& context);
};

class VM_NavigationMap
{
public:

    static VM_NavigationMap_Manual Manual;
    static VM_NavigationMap_AltitudeControl AltitudeControl;
    static VM_NavigationMap_PositionControl PositionControl;
    static VM_NavigationMap_AutoLoiter AutoLoiter;
    static VM_NavigationMap_AutoReturnToLaunch AutoReturnToLaunch;
    static VM_NavigationMap_Acrobatic Acrobatic;
    static VM_NavigationMap_Stabilize Stabilize;
    static VM_NavigationMap_Rattitude Rattitude;
    static VM_NavigationMap_AutoTakeoff AutoTakeoff;
    static VM_NavigationMap_AutoLand AutoLand;
    static VM_NavigationMap_Init Init;
};

class VM_NavigationMap_Default :
    public VM_NavigationState
{
public:

    VM_NavigationMap_Default(const char * const name, const int stateId)
    : VM_NavigationState(name, stateId)
    {};

};

class VM_NavigationMap_Manual :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_Manual(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_AltitudeControl :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_AltitudeControl(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_PositionControl :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_PositionControl(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_AutoLoiter :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_AutoLoiter(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_AutoReturnToLaunch :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_AutoReturnToLaunch(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_Acrobatic :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_Acrobatic(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_Stabilize :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_Stabilize(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
};

class VM_NavigationMap_Rattitude :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_Rattitude(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_AutoTakeoff :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_AutoTakeoff(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLand(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_AutoLand :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_AutoLand(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Entry(VM_NavigationContext&);
    virtual void Reset(VM_NavigationContext& context);
    virtual void trAcrobatic(VM_NavigationContext& context);
    virtual void trAltitudeControl(VM_NavigationContext& context);
    virtual void trAutoLoiter(VM_NavigationContext& context);
    virtual void trAutoReturnToLaunch(VM_NavigationContext& context);
    virtual void trAutoTakeoff(VM_NavigationContext& context);
    virtual void trManual(VM_NavigationContext& context);
    virtual void trPositionControl(VM_NavigationContext& context);
    virtual void trRattitude(VM_NavigationContext& context);
    virtual void trStabilize(VM_NavigationContext& context);
};

class VM_NavigationMap_Init :
    public VM_NavigationMap_Default
{
public:
    VM_NavigationMap_Init(const char * const name, const int stateId)
    : VM_NavigationMap_Default(name, stateId)
    {};

    virtual void Reset(VM_NavigationContext& context);
    virtual void trInitComplete(VM_NavigationContext& context);
};

class VM_NavigationContext :
    public statemap::FSMContext
{
public:

    explicit VM_NavigationContext(VM_Navigation& owner)
    : FSMContext(VM_NavigationMap::Init),
      _owner(owner)
    {};

    VM_NavigationContext(VM_Navigation& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline VM_Navigation& getOwner()
    {
        return (_owner);
    };

    inline VM_NavigationState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<VM_NavigationState&>(*_state);
    };

    inline void Reset()
    {
        getState().Reset(*this);
    };

    inline void trAcrobatic()
    {
        getState().trAcrobatic(*this);
    };

    inline void trAltitudeControl()
    {
        getState().trAltitudeControl(*this);
    };

    inline void trAutoLand()
    {
        getState().trAutoLand(*this);
    };

    inline void trAutoLoiter()
    {
        getState().trAutoLoiter(*this);
    };

    inline void trAutoReturnToLaunch()
    {
        getState().trAutoReturnToLaunch(*this);
    };

    inline void trAutoTakeoff()
    {
        getState().trAutoTakeoff(*this);
    };

    inline void trInitComplete()
    {
        getState().trInitComplete(*this);
    };

    inline void trManual()
    {
        getState().trManual(*this);
    };

    inline void trPositionControl()
    {
        getState().trPositionControl(*this);
    };

    inline void trRattitude()
    {
        getState().trRattitude(*this);
    };

    inline void trStabilize()
    {
        getState().trStabilize(*this);
    };

private:
    VM_Navigation& _owner;
};


#endif // VM_NAVIGATIONCONTEXT_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
