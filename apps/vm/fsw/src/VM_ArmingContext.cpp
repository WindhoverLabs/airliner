//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : VM_Arming.sm
//

#include "vm_Arming.h"
#include "VM_ArmingContext.h"

using namespace statemap;

// Static class declarations.
VM_ArmingMap_Init VM_ArmingMap::Init("VM_ArmingMap::Init", 0);
VM_ArmingMap_Standby VM_ArmingMap::Standby("VM_ArmingMap::Standby", 1);
VM_ArmingMap_Armed VM_ArmingMap::Armed("VM_ArmingMap::Armed", 2);
VM_ArmingMap_StandbyError VM_ArmingMap::StandbyError("VM_ArmingMap::StandbyError", 3);
VM_ArmingMap_ArmedError VM_ArmingMap::ArmedError("VM_ArmingMap::ArmedError", 4);

void VM_ArmingState::Arm(VM_ArmingContext& context)
{
    Default(context);
}

void VM_ArmingState::Disarm(VM_ArmingContext& context)
{
    Default(context);
}

void VM_ArmingState::Error(VM_ArmingContext& context)
{
    Default(context);
}

void VM_ArmingState::InitComplete(VM_ArmingContext& context)
{
    Default(context);
}

void VM_ArmingState::Reset(VM_ArmingContext& context)
{
    Default(context);
}

void VM_ArmingState::Default(VM_ArmingContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void VM_ArmingMap_Init::InitComplete(VM_ArmingContext& context)
{
    VM_Arming& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Init();
        context.setState(VM_ArmingMap::Standby);
    }
    catch (...)
    {
        context.setState(VM_ArmingMap::Standby);
        throw;
    }
    context.getState().Entry(context);

}

void VM_ArmingMap_Init::Reset(VM_ArmingContext& context)
{
    VM_Arming& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Init();
        context.setState(VM_ArmingMap::Init);
    }
    catch (...)
    {
        context.setState(VM_ArmingMap::Init);
        throw;
    }
    context.getState().Entry(context);

}

void VM_ArmingMap_Standby::Entry(VM_ArmingContext& context)

{
    VM_Arming& ctxt = context.getOwner();

    ctxt.EnteredStandby();
}

void VM_ArmingMap_Standby::Arm(VM_ArmingContext& context)
{
    VM_Arming& ctxt = context.getOwner();

    if (
                      ctxt.PreFlightCheckCleared() == true
                  )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_ArmingMap::Armed);
        context.getState().Entry(context);
    }
    else
    {
         VM_ArmingMap_Default::Arm(context);
    }

}

void VM_ArmingMap_Standby::Error(VM_ArmingContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_ArmingMap::StandbyError);
    context.getState().Entry(context);

}

void VM_ArmingMap_Standby::Reset(VM_ArmingContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_ArmingMap::Init);
    context.getState().Entry(context);

}

void VM_ArmingMap_Armed::Entry(VM_ArmingContext& context)

{
    VM_Arming& ctxt = context.getOwner();

    ctxt.EnteredArmed();
}

void VM_ArmingMap_Armed::Exit(VM_ArmingContext& context)

{
    VM_Arming& ctxt = context.getOwner();

    ctxt.ExitedArmed();
}

void VM_ArmingMap_Armed::Disarm(VM_ArmingContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_ArmingMap::Standby);
    context.getState().Entry(context);

}

void VM_ArmingMap_Armed::Error(VM_ArmingContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_ArmingMap::ArmedError);
    context.getState().Entry(context);

}

void VM_ArmingMap_Armed::Reset(VM_ArmingContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_ArmingMap::Init);
    context.getState().Entry(context);

}

void VM_ArmingMap_StandbyError::Entry(VM_ArmingContext& context)

{
    VM_Arming& ctxt = context.getOwner();

    ctxt.EnteredStandbyError();
}

void VM_ArmingMap_ArmedError::Entry(VM_ArmingContext& context)

{
    VM_Arming& ctxt = context.getOwner();

    ctxt.EnteredArmedError();
}

//
// Local variables:
//  buffer-read-only: t
// End:
//
