//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : VM_Navigation.sm
//

#include "vm_Navigation.h"
#include "VM_NavigationContext.h"

using namespace statemap;

// Static class declarations.
VM_NavigationMap_Manual VM_NavigationMap::Manual("VM_NavigationMap::Manual", 0);
VM_NavigationMap_AltitudeControl VM_NavigationMap::AltitudeControl("VM_NavigationMap::AltitudeControl", 1);
VM_NavigationMap_PositionControl VM_NavigationMap::PositionControl("VM_NavigationMap::PositionControl", 2);
VM_NavigationMap_AutoLoiter VM_NavigationMap::AutoLoiter("VM_NavigationMap::AutoLoiter", 3);
VM_NavigationMap_AutoReturnToLaunch VM_NavigationMap::AutoReturnToLaunch("VM_NavigationMap::AutoReturnToLaunch", 4);
VM_NavigationMap_Acrobatic VM_NavigationMap::Acrobatic("VM_NavigationMap::Acrobatic", 5);
VM_NavigationMap_Stabilize VM_NavigationMap::Stabilize("VM_NavigationMap::Stabilize", 6);
VM_NavigationMap_Rattitude VM_NavigationMap::Rattitude("VM_NavigationMap::Rattitude", 7);
VM_NavigationMap_AutoTakeoff VM_NavigationMap::AutoTakeoff("VM_NavigationMap::AutoTakeoff", 8);
VM_NavigationMap_AutoLand VM_NavigationMap::AutoLand("VM_NavigationMap::AutoLand", 9);
VM_NavigationMap_Init VM_NavigationMap::Init("VM_NavigationMap::Init", 10);

void VM_NavigationState::Reset(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trAcrobatic(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trAltitudeControl(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trAutoLand(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trAutoLoiter(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trAutoTakeoff(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trInitComplete(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trManual(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trPositionControl(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trRattitude(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::trStabilize(VM_NavigationContext& context)
{
    Default(context);
}

void VM_NavigationState::Default(VM_NavigationContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void VM_NavigationMap_Manual::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredManual();
}

void VM_NavigationMap_Manual::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_Manual::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_Manual::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_Manual::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_Manual::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_Manual::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_Manual::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoTakeoffValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_Manual::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_Manual::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_Manual::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_AltitudeControl::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredAltitudeControl();
}

void VM_NavigationMap_AltitudeControl::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_AltitudeControl::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_AltitudeControl::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if (    ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_AltitudeControl::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_AltitudeControl::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_AltitudeControl::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsLocalPositionIsValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_AltitudeControl::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_AltitudeControl::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_AltitudeControl::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_AltitudeControl::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_PositionControl::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredPositionControl();
}

void VM_NavigationMap_PositionControl::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_PositionControl::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_PositionControl::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_PositionControl::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_PositionControl::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_PositionControl::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_PositionControl::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsLocalPositionIsValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_PositionControl::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_PositionControl::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_PositionControl::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_AutoLoiter::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredAutoLoiter();
}

void VM_NavigationMap_AutoLoiter::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_AutoLoiter::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_AutoLoiter::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_AutoLoiter::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_AutoLoiter::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_AutoLoiter::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsLocalPositionIsValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_AutoLoiter::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_AutoLoiter::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_AutoLoiter::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_AutoLoiter::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredAutoReturnToLaunch();
}

void VM_NavigationMap_AutoReturnToLaunch::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_AutoReturnToLaunch::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsLocalPositionIsValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_AutoReturnToLaunch::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_Acrobatic::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredAcrobatic();
}

void VM_NavigationMap_Acrobatic::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_Acrobatic::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_Acrobatic::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_Acrobatic::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_Acrobatic::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_Acrobatic::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsLocalPositionIsValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_Acrobatic::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_Acrobatic::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_Acrobatic::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_Acrobatic::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_Stabilize::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredStabilize();
}

void VM_NavigationMap_Stabilize::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_Stabilize::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_Stabilize::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_Stabilize::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_Stabilize::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_Stabilize::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_Stabilize::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsLocalPositionIsValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_Stabilize::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_Stabilize::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_Stabilize::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_Rattitude::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredRattitude();
}

void VM_NavigationMap_Rattitude::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_Rattitude::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_Rattitude::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_Rattitude::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if (
                             ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_Rattitude::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_Rattitude::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_Rattitude::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsLocalPositionIsValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_Rattitude::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_Rattitude::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_Rattitude::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_AutoTakeoff::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredAutoTakeoff();
}

void VM_NavigationMap_AutoTakeoff::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_AutoTakeoff::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_AutoTakeoff::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_AutoTakeoff::trAutoLand(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLandValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLand);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLand(context);
    }

}

void VM_NavigationMap_AutoTakeoff::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_AutoTakeoff::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_AutoTakeoff::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_AutoTakeoff::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_AutoTakeoff::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_AutoTakeoff::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_AutoLand::Entry(VM_NavigationContext& context)

{
    VM_Navigation& ctxt = context.getOwner();

    ctxt.EnteredAutoLand();
}

void VM_NavigationMap_AutoLand::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_AutoLand::trAcrobatic(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAcrobaticValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Acrobatic);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAcrobatic(context);
    }

}

void VM_NavigationMap_AutoLand::trAltitudeControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAltCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AltitudeControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAltitudeControl(context);
    }

}

void VM_NavigationMap_AutoLand::trAutoLoiter(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionAutoLoiterValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoLoiter);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoLoiter(context);
    }

}

void VM_NavigationMap_AutoLand::trAutoReturnToLaunch(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoReturnToLaunch);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoReturnToLaunch(context);
    }

}

void VM_NavigationMap_AutoLand::trAutoTakeoff(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsLocalPositionIsValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::AutoTakeoff);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trAutoTakeoff(context);
    }

}

void VM_NavigationMap_AutoLand::trManual(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Manual);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trManual(context);
    }

}

void VM_NavigationMap_AutoLand::trPositionControl(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionPosCtlValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::PositionControl);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trPositionControl(context);
    }

}

void VM_NavigationMap_AutoLand::trRattitude(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionRattitudeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Rattitude);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trRattitude(context);
    }

}

void VM_NavigationMap_AutoLand::trStabilize(VM_NavigationContext& context)
{
    VM_Navigation& ctxt = context.getOwner();

    if ( 
                             ctxt.IsTransitionStabilizeValid() == true && 
                             ctxt.IsVehicleArmed() == true
                         )
    {
        context.getState().Exit(context);
        // No actions.
        context.setState(VM_NavigationMap::Stabilize);
        context.getState().Entry(context);
    }
    else
    {
         VM_NavigationMap_Default::trStabilize(context);
    }

}

void VM_NavigationMap_Init::Reset(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Init);
    context.getState().Entry(context);

}

void VM_NavigationMap_Init::trInitComplete(VM_NavigationContext& context)
{

    context.getState().Exit(context);
    context.setState(VM_NavigationMap::Manual);
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
