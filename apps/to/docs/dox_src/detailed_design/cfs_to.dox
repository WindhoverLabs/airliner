/*==========================================================================*/
/* NOTE:                                                                    */
/*      Additional notes to the Author can be found in comment blocks such  */
/*      as this one.  These comment blocks will not appear in the doxygen   */
/*      output and do not need to be removed but can be if so desired.      */
/*      All text found within the pages that is surrounded by "()" is       */
/*      merely a suggestion as to the appropriate content the Author should */
/*      insert at that location.                                            */
/*==========================================================================*/
/**
    \mainpage

       <UL>
           <LI> \subpage cfstorevhist
           <LI> \subpage cfstointro
           <LI> \subpage cfstoovr
           <LI> \subpage cfstoopr
           <LI> \subpage cfstoreq
           <LI> \subpage cfstodg
           <LI> \subpage cfstocmds
           <LI> \subpage cfstotlm
           <LI> \subpage cfstotbl
           <LI> \subpage cfstocfg
           <LI> \subpage cfstocons
           <LI> \subpage cfstofaqs
           <LI> \subpage to_events.h "TO Application Event Message Reference" <BR>
       </UL>
**/

/*==========================================================================*/
/* NOTE:                                                                    */
/* If a copy of to_events.h is in the detailed_design directory then above      */
/* reference will work.                                                     */
/*==========================================================================*/

/**
  \page cfstorevhist TO Application Detailed Design Revision History

  This document is generated against #TO_MAJOR_VERSION #TO_MINOR_VERSION #TO_REVISION.
  
  Next: \ref cfstointro

**/

/*==========================================================================*/
/* NOTE: The Author may wish to examine the Acronym list and ensure the     */
/*       Application's abbreviation is put in alphabetical order.           */
/*==========================================================================*/
/**
  \page cfstointro TO Application Introduction
	
  <H2> Scope </H2>

  This document provides a complete specification for the commands and telemetry associated
  with the TO Application (TO) software.  The document is intended primarily 
  for users of the software (operations personal, test engineers, and maintenance personnel).  
  The last section of the document, the deployment guide section, is intended for mission 
  developers when deploying and configuring this application software for a mission 
  flight software build environment. 

  <H2> Applicable Documents </H2>

  <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%">
  <TR><TD WIDTH="20%"> <B>Document ID</B> </TD> 
      <TD WIDTH="40%"> <B>Document Title</B> </TD>
  <TR><TD WIDTH="20%"> Doxygen       </TD>
        <TD WIDTH="40%"> TO cFS Application (TO) User's Guide </TD>
  </TABLE>


  <H2> Acronyms </H2>

  <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%">
  <TR><TD WIDTH="20%"> <B>Acronym</B> </TD> <TD WIDTH="40%"> <B>Description</B>                       </TD>
  <TR><TD WIDTH="20%"> API     </TD> <TD WIDTH="40%"> Application Programming Interface               </TD>
  <TR><TD WIDTH="20%"> CCSDS   </TD> <TD WIDTH="40%"> Consultative Committee for Space Data Systems   </TD>
  <TR><TD WIDTH="20%"> C&DH    </TD> <TD WIDTH="40%"> Command and Data Handling                       </TD>
  <TR><TD WIDTH="20%"> CFE     </TD> <TD WIDTH="40%"> Core Flight Executive                           </TD>
  <TR><TD WIDTH="20%"> CFS     </TD> <TD WIDTH="40%"> Core Flight System                              </TD>
  <TR><TD WIDTH="20%"> Cmd     </TD> <TD WIDTH="40%"> Command                                         </TD>
  <TR><TD WIDTH="20%"> CPU     </TD> <TD WIDTH="40%"> Central Processing Unit                         </TD>
  <TR><TD WIDTH="20%"> FSW     </TD> <TD WIDTH="40%"> Flight Software                                 </TD>
  <TR><TD WIDTH="20%"> HK      </TD> <TD WIDTH="40%"> Housekeeping telemetry, or CFS Housekeeping Application</TD>
  <TR><TD WIDTH="20%"> HW, H/W </TD> <TD WIDTH="40%"> Hardware                                        </TD>
  <TR><TD WIDTH="20%"> ICD     </TD> <TD WIDTH="40%"> Interface Control Document                      </TD>
  <TR><TD WIDTH="20%"> ISR     </TD> <TD WIDTH="40%"> Interrupt Service Routine                       </TD>
  <TR><TD WIDTH="20%"> OS      </TD> <TD WIDTH="40%"> Operating System                                </TD>
  <TR><TD WIDTH="20%"> OSAL    </TD> <TD WIDTH="40%"> Operating System Abstraction Layer              </TD>
  <TR><TD WIDTH="20%"> Pkts    </TD> <TD WIDTH="40%"> Packets                                         </TD>
  <TR><TD WIDTH="20%"> RAM     </TD> <TD WIDTH="40%"> Random-Access Memory                            </TD>
  <TR><TD WIDTH="20%"> RTOS    </TD> <TD WIDTH="40%"> Real Time Operating System                      </TD>
  <TR><TD WIDTH="20%"> SB      </TD> <TD WIDTH="40%"> Software Bus Service                            </TD>
  <TR><TD WIDTH="20%"> SW, S/W </TD> <TD WIDTH="40%"> Software                                        </TD>
  <TR><TD WIDTH="20%"> TBD     </TD> <TD WIDTH="40%"> To Be Determined                                </TD>
  <TR><TD WIDTH="20%"> TBL     </TD> <TD WIDTH="40%"> Table                                           </TD>
  <TR><TD WIDTH="20%"> TLM     </TD> <TD WIDTH="40%"> Telemetry                                       </TD>
  <TR><TD WIDTH="20%"> UTC     </TD> <TD WIDTH="40%"> Universal Coordinated Time (time scale)         </TD>
  </TABLE>

  Prev: \ref cfstorevhist <BR>
  Next: \ref cfstoovr
**/

/**
  \page cfstoovr TO Application Overview
	
  The TO Application (TO) application subscribes to and transmits Consultative Committee for Space Data Systems (CCSDS) 
  Space Packet Protocol Telemetry packets from the cFE Software Bus to output media.  The specifics
  of the output media are handled by the platform specific TO custom layer, contained within the
  build configuration.
	
  TO Design Overview
  ====

  \image html TO_Context_Diagram.png "TO Context Diagram" <BR>
  
  \b TO \b Activities
  
  Process Telemetry

    - Implements prioritized class based filtering to make maximum use of limited bandwidth.

    - Messages are classified into priority based queues when scheduled by the Scheduler application.

    - Messages are dequeued by the TO Scheduler and written to the output port as the output port is 
      available to be written to and as messages are available to be dequeued.

    - Lower priority queues are only served when the higher priority queues are empty.

    - Telemetry maximum rate groups are defined by the SCH application configuration but can be preempted 
      by higher priority messages.
      
  
  \image html TO_Priority_Queueing.png "TO Priority Queueing" <BR>   
  
  \image html TO_Executive.png "Executive" <BR>  
  
  The main loop, besides processing commands, calls #TO_Classifier_Run() and #TO_Scheduler_Run() for each channel.  Each channel has 1 Classifier, 1 Scheduler, and 1 Output Queue
  but can have multiple message definitions (aka Message Flows) and Priority Queues.  The rate this process executes depends on the rate that the #TO_SEND_TLM_MID message
  is scheduled at in the Scheduler configuration table.  If the TO_SEND_TLM_MID is scheduled at a rate of 2Hz, this function will execute at approximately 500ms intervals.
  
  \image html TO_Run_Classifier.png "Run Classifier" <BR>
  
  This process sorts the incoming messages into Priority Queues.  A message can be routed to one and only one Priority Queue.  If you decide to change the Priority Queue assignment,
  you must either load a new configuration table or send a command to remove the Message Flow and readd the Message Flow with the new Priority Queue assignment.  This classifying 
  of messages into Priority Queues is what provides the priority based classification.  All messages within a Priority Queue have the same priority.  Within a Priority Queue,
  the order the messages are transmitted is based on the order the message was received in the Message Flow pipe.  The purpose of the classification will appear clearer in the 
  next step.  
  
  \image html TO_Run_Scheduler.png "Run Scheduler" <BR>
  
  This process moves messages in a sequential fashion from the highest priority Priority Queue (the first Priority Queue) to the Output Queue.  If the Output Queue is not full,
  it will move messages in a sequential fashion from the next highest priority Priority Queue (the second Priority Queue) to the Output Queue.  This will continue until either
  the Output Queue is full or all Priority Queues are emptied.  This will result in the FIFO Output Queue containing highest priority messages first, followed subsequently by 
  lower priority messages. 
      
  \b TO \b Structure
  
  TO consists of 1 to n (configurable) channels and each channel is independent of the other channels.  Even if 
  the channels are configured to handle the same message identifier, the channels can handle the the message in different ways.
  The channels employ an output queue.  It is TO's job is to subscribe to messages from 
  the cFE Software Bus and put them into the appropriate priority queues.  Messages are taken from the priority queues in priority
  order and put onto the output queue where they are sent to the corresponding TO output channel device.  
     
  ----
	
  Prev: \ref cfstointro <BR>
  Next: \ref cfstoopr
**/

/**
    \page cfstoopr TO Application Operation

    1.  Table Handling
    ----
    
    The channels each have a single table.  Each table is designed to be 
    self-consistent for each channel configuration, which means that all the parts of the table should all work together.  TO should always load a default table for each channel when it boots.
    The default channel configuration tables are configured to support safe/proper initial TO output while interacting with
    other system configuration operations.  If TO fails to load a table, then TO will fall back to an backup table for the channel.

    There should be different tables for the separate supported radio bandwidth configurations and different operational 
    configurations.  An "invalid" TO table is one that will not pass TO's validation routines on range-checking data values 
    and internal data references inside the table itself.  TO will not attempt to determine when a table is misconfigured.
    TO will only determine if the data in it is invalid.
    
    Monitoring Command Counters
    ----

    Note that each command successfully received, and processed, by TO from the CFE SB
    will increment the \link #TO_HkTlm_t.usCmdCnt \endlink counter.

    Each command successfully received, but not successfully processed, by TO from the CFE SB
    will increment the \link #TO_HkTlm_t.usCmdErrCnt \endlink, but not the \link #TO_HkTlm_t.usCmdCnt \endlink.

    If neither counter increments, then TO did not successfully receive a TO_CMD_MID command from the
    CFE SB.
    
    Monitoring Channel Task Housekeeping Data
    ----

    There is a set of housekeeping data for each channel task which provides insight into
    operation of each channel interface.  There is a sent message count flag, queued message count
    flag, dropped message count flag, failed message count flag, the number of bytes sent from each channel's 
    interface, and the channel's interface memory usuage.
    
    The sent message count flag is the indicator that the message was successfully sent out of the channel interface 
    by the TO application. This indicator is key for determining the health of the channel's interface. Incrementing
    if it is healthy and stagnate if it is not healthy. 
    
    <UL>
        <LI> Sent message count flag: #TO_HkTlm_t.uiSentMsgCountChannel
    </UL>
    
    The queued message count flag is the indicator of the number messages queued on the channel's priority queues. 
    by the TO application. This indicator is key for determining if a channel's interface showing signs of pending
    trouble.  If the queued counter keeps incrementing and not decrementing, the channel interface is starting to
    get behind as messages are not being sent out of the interface fast enough. 
    
    <UL>
        <LI> Queued message count flag: #TO_HkTlm_t.uiQueuedMsgCountChannel
    </UL>
    
    The dropped message count flag is the indicator of the number messages dropped and not passed onto the 
    channel's priority queues by the TO application. This indicator showing there might be a problem with the message.
    The message is be too long or the message is not valid on that particular channel.  It could also indicate the
    channel's queue is full.
    
    <UL>
        <LI> Dropped message count flag: #TO_HkTlm_t.uiDropMsgCountChannel
    </UL>
    
    The failed message count flag is the indicator of the number messages failed on channel's interface write  
    after being pulled from the output queue and lost.
    
    <UL>
        <LI> Failed message count flag: #TO_HkTlm_t.uiFailedMsgCountChannel
    </UL>              

    The number of bytes counter increments as data is being sent from each channel's interface.

    <UL>
        <LI> channel interface sent byte counter: #TO_HkTlm_t.uiBytesSentChannel
    </UL>
    
    The channel memory is the indicator of how much memory a channel task is using to do it's job.
    This indicator is good for determining the health state of a channel.  Steadily increasing memory
    is an indicator of a possible issue, particularly as it nears memory exhaustion.  This indicator can flucuate 
    up and down or remain steady.  This indicates the channel state is nominal.

    <UL>
        <LI> channel interface memory usuage information: #TO_HkTlm_t.ChannelMemInfo
    </UL>    


    Monitoring Command Counters
    ----
    Note that each command successfully received, and processed, by TO from the CFE SB
    will increment the \link #TO_HkTlm_t.usCmdCnt \endlink counter.

    Each command successfully received, but not successfully processed, by TO from the CFE SB
    will increment the \link #TO_HkTlm_t.usCmdErrCnt \endlink, but not the \link #TO_HkTlm_t.usCmdCnt \endlink.

    If neither counter increments, then TO did not successfully receive a TO_CMD_MID command from the
    CFE SB.

    Commands
    ====

    No-op
    ----

    This command performs no other function than to increment the command execution counter.  The command may be used to 
    verify general aliveness of the Telemetry Output task.
    
    Successful execution of this command may be verified with the following telemetry:

    - Command counter #TO_HkTlm_t.usCmdCnt will increment
    - The \link TO_CMD_NOOP_INF_EID \endlink informational event message will be generated
    
    Failure to execute this command will result in no change of the command counter.

    This command may fail for the following reason(s):
    
    - Command packet length not as expected
    
    See also: \link TO_NOOP_CC \endlink
    
    
    Reset Counters
    ----

    This command resets the TO housekeeping and channel telemetry counters.
    
    
    The following housekeeping telemetry items will be reset to zero:
    
    <UL>
        <LI> #TO_HkTlm_t.usCmdCnt
        <LI> #TO_HkTlm_t.usCmdErrCnt
        <LI> #TO_HkTlm_t.usTotalMsgDropped
        <LI> #TO_HkTlm_t.SentBytes
    </UL>

    The following telemetry items for each channel will be set to zero:

    <UL>
        <LI> #TO_HkTlm_t.ChannelMemInfo
        <LI> #TO_HkTlm_t.uiSentMsgCountChannel
        <LI> #TO_HkTlm_t.uiQueuedMsgCountChannel
        <LI> #TO_HkTlm_t.uiDropMsgCountChannel
        <LI> #TO_HkTlm_t.uiFailedMsgCountChannel
        <LI> #TO_ChannelDiagTlm_t.MemFullCount
        <LI> #TO_MessageFlowDiagTlm_t.DroppedMsgCnt
        <LI> #TO_MessageFlowDiagTlm_t.QueuedMsgCnt
        <LI> #TO_PriorityDiagTlm_t.DroppedMsgCnt
        <LI> #TO_PriorityDiagTlm_t.QueuedMsgCnt
        <LI> #TO_PriorityDiagTlm_t.HighwaterMark
        <LI> #TO_PriorityDiagTlm_t.CurrentlyQueuedCnt
        <LI> #TO_OutputQueueDiagTlm_t.SentCount
        <LI> #TO_OutputQueueDiagTlm_t.HighwaterMark
        <LI> #TO_OutputQueueDiagTlm_t.SentBytes
        <LI> #TO_OutputQueueDiagTlm_t.CurrentlyQueuedCnt
    </UL>
    
    Successful execution of this command may be verified with the following telemetry:
    <UL>
        <LI> \link TO_CMD_RESET_INF_EID \endlink info event message will be generated when the command is executed
    </UL>

    Failure to execute this command will result in no change of any of the specified counters above.

    This command may fail for the following reason(s):
    
    <UL>
        <LI> Command packet length not as expected
    </UL>
    
    See also: \link TO_RESET_CC \endlink
    
    
    Add Message Flow
    ----
    
    This command adds a message flow to the configuration table, which will add 
    that message to the downlink for the channel specified.
    
    Successful execution of this command may be verified with the following telemetry:

    <UL>
        <LI> Command counter #TO_HkTlm_t.usCmdCnt will increment
        <LI> The \link TO_CMD_ADD_MSG_FLOW_EID \endlink informational event message will be generated
    </UL>
    
    Failure to execute this command will result in:

    <UL>
        <LI> Command error counter #TO_HkTlm_t.usCmdErrCnt will increment
    </UL>
    
    This command may fail for the following reason(s):
    
    <UL>
        <LI> Message flow already defined. The \link TO_CMD_ADD_MSG_FLOW_ERR_EID \endlink error event will be sent in this case.
        <LI> Command packet length not as expected
        <LI> Invalid channel specified
    </UL>

    See also: \link TO_ADD_MESSAGE_FLOW_CC \endlink


    Remove Message Flow
    ----
    
    This command removes a message flow to the configuration table, which will remove 
    that message from the downlink for the channel specified.
    
    Successful execution of this command may be verified with the following telemetry:

    <UL>
        <LI> Command counter #TO_HkTlm_t.usCmdCnt will increment
        <LI> The \link TO_CMD_REMOVE_MSG_FLOW_EID \endlink informational event message will be generated
    </UL>
    
    Failure to execute this command will result in:

    <UL>
        <LI> Command error counter #TO_HkTlm_t.usCmdErrCnt will increment
    </UL>
    
    This command may fail for the following reason(s):

    <UL>
        <LI> Message flow not defined. The \link TO_CMD_REMOVE_MSG_FLOW_ERR_EID \endlink error event will be sent in this case.
        <LI> Command packet length not as expected
        <LI> Invalid channel specified
    </UL>

    See also: \link TO_REMOVE_MESSAGE_FLOW_CC \endlink


    Query Message Flow
    ----
    
    This command queries a specified message flow configuration for a specified channel. Querying
    will not change any downlink behavior. A \link TO_MSG_FLOW_INFO_EID \endlink informational event will be
    generated containing all the message flow configuration option details, which includes:

    <UL>
        <LI> Message ID
        <LI> Message limit
        <LI> Priority queue ID
        <LI> Dropped message count
        <LI> Queued message count
        <LI> Software Bus message count
        <LI> Failed message count
        <LI> Sent message count
    </UL>    
    
    Successful execution of this command may be verified with the following telemetry:

    <UL>
        <LI> Command counter #TO_HkTlm_t.usCmdCnt will increment
        <LI> The \link TO_MSG_FLOW_INFO_EID \endlink informational event message will be generated
    </UL>
    
    Failure to execute this command will result in:

    <UL>
        <LI> Command error counter #TO_HkTlm_t.usCmdErrCnt will increment
    </UL>
    
    This command may fail for the following reason(s):

    <UL>
        <LI> Message flow not defined. The \link TO_MSG_FLOW_INFO_ERR_EID \endlink error event will be sent in this case.
        <LI> Invalid channel specified
        <LI> Command packet length not as expected
    </UL>
    
    See also: \link TO_QUERY_MESSAGE_FLOW_CC \endlink


    Query Priority Queue
    ----
    
    This command queries a specified priority queue for a specified channel. Querying 
    will not change any downlink behavior. A \link TO_PQUEUE_INFO_EID \endlink informational event will be
    generated containing all the priority queue diagnostic details including:

    <UL>
        <LI> State
        <LI> Message Limit
        <LI> Queue Type
        <LI> Dropped message count
        <LI> Queued message count
        <LI> Currently queued count
        <LI> Highwater mark
    </UL>    
    
    Successful execution of this command may be verified with the following telemetry:

    <UL>
        <LI> Command counter #TO_HkTlm_t.usCmdCnt will increment
        <LI> The \link TO_MSG_FLOW_INFO_EID \endlink informational event message will be generated
    </UL>
    
    Failure to execute this command will result in:

    <UL>
        <LI> Command error counter #TO_HkTlm_t.usCmdErrCnt will increment
    </UL>
    
    This command may fail for the following reason(s):

    <UL>
        <LI> Message flow not defined. The \link TO_MSG_FLOW_INFO_ERR_EID \endlink error event will be sent in this case.
        <LI> Command packet length not as expected
        <LI> Invalid channel specified
    </UL>
    
    See also: \link TO_QUERY_PRIORITY_QUEUE_CC \endlink
    
    
    Query Output Channel
    ----
  
    This command queries a specified a specified output channel. Querying 
    will not change any downlink behavior. A \link TO_OUT_CH_INFO_EID \endlink informational event will be
    generated containing all the ouput channel diagnostic details including:

    <UL>
        <LI> State
        <LI> Queue Depth
        <LI> Sent Count
        <LI> Currently Queued Count
        <LI> Highwater Mark for Queued Count
    </UL>

    Successful execution of this command may be verified with the following telemetry:

    <UL>
        <LI> Command counter #TO_HkTlm_t.usCmdCnt will increment
        <LI> The \link TO_OUT_CH_INFO_EID \endlink event is sent
    </UL>
    
    Failure to execute this command will result in:

    <UL>
        <LI> Command error counter #TO_HkTlm_t.usCmdErrCnt will increment
    </UL>
    
    This command may fail for the following reason(s):

    <UL>
        <LI> Command packet length not as expected
        <LI> Invalid channel specified
    </UL>

    See also: \link TO_QUERY_OUTPUT_CHANNEL_CC \endlink
    
    
    Send Diagnostic
    ----
    
    This command sends the full diagnostic data for TO to the SB. This includes the data that 
    is sent from the \link TO_QUERY_OUTPUT_CHANNEL_CC \endlink and \link TO_QUERY_PRIORITY_QUEUE_CC \endlink
    commands, but also data on all of the message flows as well. The difference between this and
    the other commands is that these diagnostic packets are sent to the cFE SB, and if TO output
    channels include the message flows for them these diagnostic packets are sent over the downlink.
    The other commands send events with diagnostic data but not the packets themselves.
    
    Successful execution of this command may be verified with the following telemetry:

    <UL>
        <LI> Command counter #TO_HkTlm_t.usCmdCnt will increment
        <LI> The \link TO_CMD_SEND_DIAG_EID \endlink event is sent
    </UL>
    
    Failure to execute this command will result in:

    <UL>
        <LI> Command error counter #TO_HkTlm_t.usCmdErrCnt will increment
    </UL>
    
    This command may fail for the following reason(s):

    <UL>
        <LI> Command packet length not as expected
        <LI> Invalid channel specified
    </UL>
    
    See also: \link TO_SEND_DIAG_CC \endlink

    
    Next: \ref cfstoreq <BR>
    Prev: \ref cfstoovr

    3. Message Flow Overflows
    ----

    The CFE Software Bus provides the pipe for the Message Flows.  If a message is published at a faster rate than the TO executive is cycling and over flows the Message Flow
    message limit, the CFE Software Bus Message Limit counter will increment.  This is not necessarily a problem, depending on the TO configuration design.  But if the TO 
    configuration is tuned such that the TO executive can process telemetry faster than any publisher can publish the messages, the Message Limit counter should not increment.
    
    4. Priority and Output Queue Overflow
    ----
    
    Priority Queue and Output Queues can overflow for multiple reasons.  Neither of which is necessarily a problem, depending on the TO configuration.  The TO prioritization
    algorithm is designed to be resilient to queue overflow.  
    
    If messages come in faster than the TO output task can transmit the messages, the Output Queue will begin to backup.  Messages will not move from Priority Queue to Output 
    Queue when the Output Queue is full.  The messages in the Priority Queue will not get dropped.  They just won't move until the Output Queue frees up room again.
    
    A combination of message coming in faster than the TO executive cycles and Priority Queues sized to small to accomodate the fast incoming messages, will result in Priority
    Queues filling up.  Congested Priority Queues can cause lower priority Priority Queues to not get serviced fully.  
    
    Ideally, Priority Queues should be sized to accomodate nominal message bursts.  "Nominal" is subjective and depends on the mission.  If too small, Priority Queues cannot 
    accomodate bursty traffic as well and require TO executive to execute at a faster rate to avoid dropping messages.  If too big, the telemetry downlink can buffer too much data,
    increasing the latency of transmitted data.  
    
    Ideally, Output Queues should be sized to make maximum use of throughput.  Output Queues should not be so large that they buffer large amounts of data, and should not be so 
    small that the output task empties the queue, resulting in wait states on the telemetry downlink.
    
    Ideally, the TO executive should be scheduled at a rate that results in minimum dropped messages.  If scheduled too fast, context switching can have negative impacts to 
    performance.  If schedule too slow, the queueing mechanisms handles bursty message traffic less efficiently and can result in increased CFE Software Bus Message Limit 
    counter increment, and both Priority and Output queue dropped messages.
    
    Use the Highwater telemetry, dropped messages counts, and memory allocation metrics in TO HK and TO diagmostic messgaes to better improve the configuration tuning.  
    
    4. Configuration Tips
    
    - If CFE Software Bus Message Limit is constantly increasing due to TO Message Flows and you want to make that stop, increase the rate that the TO executive is scheduled by
      SCH.  The faster it executes, the faster it can service the CFE Software Bus pipes and the better TO can accomodate fast or bursty traffic.
    
    - If the message input rate exceeds the rate that the output task can transmit messages, messages will always be dropped.  If TO executive cycles at a fast enough rate to 
      prevent CFE Software Bus Message Limit increments, the Classifier will eventually start dropping messages as the Output Queue backs up, causing the Priority Queues to back up 
      and eventually fill up.
      
    - If the Output Queue Highwater mark shows it is regularly full, but the Priority Queues are not full, you may want to increase the Output Queue size.  If the Priority Queues 
      are not filling up, the Output Queue may just be bursty and emptying out faster than the HK or diag message can show it.  If so, the output task may be running into wait
      states while it waits for more messages to show up in the Output Queue.  
      
    - If the Output Queue Highwater mark is regularly very low, your Output task may be experiencing excessive wait states, as the Output Queue runs dry.  If CFE Software Bus
      Message Limit and TO dropped message counters are not incrementing, TO is just under utilized and telemetry is flowing as fast as it needs to go.  If, however, Message Limit
      or TO dropped message counters are incrementing, the TO configuration may be getting bursts of messages that it is not configured to handle.  Consider increasing the TO 
      executive scheduled rate and/or increasing Priority Queues to accomodate the bursts.
      
    - Message Flow message limits cannot be adjusted directly.  However, they can be changed by sending the commands to remove a message flow, followed by add a message flow.
    
    - You may have Message Flows configured for a nominal rate or burst of messages, but occasionally have the need to allow a temporary large burst of messages through.  For 
      example, CFE EVS messages are often bursty.  For example, you may have a configuration that limits CFE EVS messages to bursts of 4, but you may be about to send a command
      to an application that will result in a burst of 30 event messages that you want to get through.  In this case, you can remove the message flow, and readd the message flow
      with a limit of 30.  Then after the command is sent and the 30 events are transmitted, you can remove the message flow, and readd it back to its original message limit.
      
    - Leave the highest and lowest Priority Queues empty.  This gives the ground the ability to command a message flow to a higher or lower priority than all other messages.
    
    - Leave every other Priority Queue empty.  This gives the ground more flexibility to command message flows to various interleaved priorities.
    
    - The more Priority Queues you have, the finer granularity you have to interleaving messages between each other by priority class.  You could have 2 Priority Queues:  High
      and Low.  You could have a Priority Queue for each message, giving you maximum control over message priority and preemption.
      message

**/

/**
    \page cfstoreq TO Application Requirements
    
    The following are TO application requirements.

    \b 2.1.1 Initialization
    
    - TO App will wait for the cFE startup sync and the entire app, and its sender threads, should be active on all interfaces 
      as early as possible.
      
    \b 2.1.2 Commands
   
    - TO App shall process commands.
    
    - TO App shall access parameters via tables.
    
    \b 2.1.3 Telemetry
    
    - TO App shall publish the TO App HK Packet.
    
    - TO App shall include processing statistics for each downlink telemetry Channel in the TO HK_Status packet.
    
    - TO App shall increment a downlink channel error counter when downlink telemetry processing encounters an error due to misconfiguration.
    
    - TO App shall generate an Event Message when downlink telemetry processing encounters a downlink channel Driver/API or hardware error.
    
    \b 2.1.4 Downlink Telemetry
    
    Routing
        
    - TO App shall subscribe to downlink telemetry from the Software Bus (SB).
        
    <TODO>
    
    Next: \ref cfstodg <BR>
    Prev: \ref cfstoopr
**/



/**
    \page cfstodg  TO Application Deployment Guide

  Initial Integration
  ====

    The first step in deploying the TO application is to coordinate the mission-wide 
    message IDs and performance IDs.  The values for CI should be accessible via the
    TO header files as noted below.  The TO platform configuration file should be updated
    for the cFS environment, including expected cFS Scheduler (SCH) application table 
    configuration. 

  Application Tailoring to the Mission
  ----
    
    The TO message MIDs must not conflict with any other cFE service or cFS application
    in the mission build.  Default values are in the ci_msgids.h, but mission-specific
    values are held in the mission configuration.
    
    The TO performance ID(s) must not conflict with any other cFE service or cFS application
    in the mission build.  Default values are in the ci_perfids.h, but mission-specific
    values are held in the mission configuration.

  Application Tailoring to the Platform
  ----

    In the to_platform_cfg.h file, there are configuration parameters that control
    TO application behavior.  This should be tailored to the specific platform
    needs.  This behavior is built into the application during compilation.

  CFS Scheduler Support
  ----

    The cFS Scheduler (SCH) application should publish the TO_SEND_HK_MID and 
    TO_SEND_TLM_MID commands for TO.  

    The TO_SEND_TLM_MID should be called at a rate required by TO responsiveness
    to its own commands being read from the cFE SB.  Issuing commands to TO at a 
    faster rate than its command pipe and SCH wakeup rate support would cause TO 
    to miss some ground commands, just like any other cFS application.

    The TO_SEND_HK_MID can be called at any time, and at any rate.  However it is
    generally assumed to be at the same, or lower rate, than TO_SEND_TLM_MID.
    
  Application Custom Interfaces (Platform Specific)
  ----
    Each platform needs to provide to_custom source file(s) that implements the API defined
    in the to_custom.h for initializing an interface, reading a message from the interface,
    and for cleaning up and closing the interface.    
     
    Next: \ref cfstocmds <BR>
    Prev: \ref cfstoreq
**/

/*==========================================================================*/
/* NOTE: The Author does not need to add any material to the following page.*/
/*       It is filled automatically by doxygen.                             */
/*==========================================================================*/
/**
    \page cfstocmds TO Application Commands

    <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%" ALIGN="CENTER">
    <TR><TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstotlm</B> </TD> 
        <TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstotbl</B></TD>
        <TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstocfg</B></TD>
    </TABLE>
  
    The following is a list of commands that are processed by the TO Application: 
**/

/*==========================================================================*/
/* NOTE: The Author does not need to add any material to the following page.*/
/*       It is filled automatically by doxygen.                             */
/*==========================================================================*/
/**
    \page cfstotlm  TO Application Telemetry

    <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%" ALIGN="CENTER">
    <TR><TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstocmds</B> </TD> 
        <TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstotbl</B></TD>
        <TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstocfg</B></TD>
    </TABLE>
    
    The following is a list of telemetry that is generated by the TO Application:    
    
## Telemetry Output (TO) Sends Resized cFE EVS Event Messages 

### Background

Versions of cFE 6.5.1 and prior send short format event messages out the
cFE Software Bus (SB) with the same length as the long format messages.  
Event messages downlink through TO; therefore, are usually sized much 
larger than they have to be to contain the arbitrary-length long-form
event message strings.  Additionally, the event message size is no 
different for short-form cFE EVS Event Messages even though there is 
no string message payload, thus wasting bandwidth.  TO will trim this 
message before it goes offboard.  In doing so, it reduces bandwidth 
for low-bandwidth real-time downlink.

TO is able to reduce the CCSDS telemetry message primary header length of an 
outgoing cFE EVS Event message such that the end of the message includes only 
the first NULL character found in the event message string.

**/

/**
    \page cfstotbl TO Application Table Definitions

    <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%" ALIGN="CENTER">
    <TR><TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstocmds</B></TD>
        <TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstotlm</B> </TD> 
        <TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstocfg</B></TD>
    </TABLE>

  (Include text describing data structures used in application tables.  Further text can be used to
   describe the process of populating the table if necessary.  Default values may also be described)

**/

/*==========================================================================*/
/* NOTE: The Author does not need to add any material to the following page.*/
/*       It is filled automatically by doxygen.                             */
/*==========================================================================*/
/**
  \page cfstocfg TO Application Configuration Parameters

  <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%" ALIGN="CENTER">
  <TR><TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstocmds</B></TD>
      <TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstotlm</B> </TD> 
      <TD WIDTH="20%" ALIGN="CENTER"> <B>\ref cfstotbl</B></TD>
  </TABLE>
  
  The following are configuration parameters used to configure the TO
  Application either for each platform or for a mission as a whole.

**/

/**
    \page cfstocons TO Application Operational Constraints
  
  ====
    It is possible for TO to exit after startup if any of the steps in its initialization
    procedure fails. For this to happen though there has to be a problem with cFE itself, 
    or if the custom layer fails to initialize. TO has additional logic for loading an 
    internal backup table if it encounters a table load issue during intialization, because 
    the config table is required for operation.

  Application Termination
  ====

    Potential causes for TO to terminate prematurely are an error return from the 
    software bus in the application main loop or error return from one of the cFE table
    services functions when TO tries to do table management (check for updates, dump 
    requests etc.) during each housekeeping cycle. 

  Critical Data Store Operation
  ====
    
    TO does not use the cFE Critical Data Store (CDS).  It does not have critical tables.
    
  Interaction with the CF Application
  ====

    The CFDP File Transfer application (CF) requires TO to provide a "throttling semaphore", not to be
    confused with the TO "channel throttling" feature.  This CF throttling semaphore is a feedback mechanism
    implemented as a counting semaphore between TO to CF to signal CF that it is OK to send another CFDP PDU
    message for TO to send out an output channel.  Without this mechanism, CF would send as quickly as it wanted
    and could overwhelm TO output capabilities.  For more detailed information, consult the CF application User's Guide.

    Note, that TO has a separate CF throttling semaphore for each output channel.  See the TO platform configuration.

    ### CFDP: Un-Wedging the CF application
  
    The CFDP application interaction with TO depends upon several things for proper operation.  This is a collection
    point of scenarios and courses of action for recovery.
  
    <B> Used a TO table with no CFDP space to ground PDU, now CF is "wedged". </B> <I>("wedged" - refuses to send PDUs)</I>
  
    <I>Scenario:</I> 
  
    Using CFDP (on CF CH 1/ TO CH 1) with a TO (CH 1/onboard) table, table A, successfully.  
    Then changed to a new TO onboard table, table B, then CF won't send PDUs.  Changing back to 
    the original TO onboard table A doesn't restore CFDP function.
  
    <I>Observables:</I>
  
    No PDUs from CF and CF Channel 1 (channel in use) Semaphore Count is 0.  Nominally 4 is the max,
    and zero should only be seen when CF is regularly sending PDUs in a transaction that is proceeding.  
    If this is zero and there are no PDUs then CF is wedged.
  
    <I>Root cause:</I>
  
    The second table, table B, didn't have the message flow for CF_SPACE_TO_GND_PDU_MID (0x0FFD) in the table.  
    That stopped CFDP PDUs from being downlinked.
  
    <I>Secondary effects:</I>
  
    However, having CF send PDUs to a TO that isn't subscribed to them will cause CF to decrement 
    the CF-TO throttling semaphore count to zero and halting CF from sending any more PDUs on that channel.  
    When TO reloads the original table, or any other table, it doesn't automatically restore the 
    CF-TO throttling semaphore count.
  
    <I>Recovery:</I>
  
    TO: Ensure the CF_SPACE_TO_GND_PDU_MID (0x0FFD) message flow is in the TO table in use.
  
    CF:

      - Abandon the outgoing CF transaction(s)
      - Make sure there is nothing being uplinked - basically CF is quiescent, no transactions either way
      - Disable the CF polling directories for CH 1
      - Disable the CF CH 1 deque (disable the CF CH 1)
      - Send 4 commands to CF to give back (increment) the CH 1 semaphore count back to 4, fsw_cmd_cfgivetake,
        for channel 1, value: 0=give/increase semaphore value, 1=take/decrement semaphore value 
        (See CF User's Guide, B.26, p.62)
      - Then re-enable CF CH 1 deque
      - Finally re-enable CF CH 1 polling directories
    
    
   <B> Changed a TO table while a CF transfer was underway and there are now problems. </B> 
    
    
   <I>Scenario:</I> 
    
   Using CFDP for a transfer and PDUs are transferring then changed the TO table.
    
   <I>Observables:</I>
    
    -  Possibility 1: No PDUs from CF anymore and Semaphore Count is 0 (for that channel).  
                      If this is zero and there are no PDUs then CF is wedged.
    
    -  Possibility 2: One or more PDUs are missing and my Class 1 transfer is corrupted 
                      (or my Class 2 transfer required retries).
    
    -  Possibility 3: The transfer completed but the CF Semaphore Count for that channel is no 
                      longer the max value of 4 when there are no transactions.
    
    -  Possibility 4: Any of the above, together.
    
    <I>Root cause:</I>
    
   Changing the TO table flushes the TO output queues and any PDUs in there.  But TO only knows 
   when to give back the CF-TO throttling semaphore count (increment the semaphore count) when TO 
   actually sends a message.  If any PDUs were dropped with the table change then that will affect 
   the CF transaction and the final semaphore count after the transaction completes.  CF can continue 
   to operate with its CF-TO throttling semaphore count less than the max value but PDU sending 
   performance might be compromised.  If that value is zero then no PDUs will be sent.
    
   <I>Recovery:</I>
    
   Option 1: "Push through"
    
   If the semaphore count is zero send four commands to CF to give back (increment)
   the CH 1 semaphore count, fsw_cmd_cfgivetake, for channel 1, value: 0=give/increase semaphore value, 
   1=take/decrement semaphore value  (See CF User's Guide, B.26, p.62).  If one or more transactions 
   are in progress, or if CF is responding to an incoming transaction then the semaphore won't be exactly 
   4 after these commands until CF has stopped sending PDUs.  This should get CF going again, but the 
   transactions will still be impacted by any lost PDUs.  Your mileage will vary.
    
   Option 2: "Safe CF then fix the semaphore"

    - Abandon the outgoing CF transaction(s)
    - Make sure there is nothing being uplinked - basically CF is quiescent, no transactions either way
    - Disable the CF polling directories for CH 1
    - Disable the CF CH 1 deque (disable the CF CH 1)
    - Send commands to CF to bump back the CH 1 semaphore count back to 4, fsw_cmd_cfgivetake, 
      for channel 1, value: 0=give/increase semaphore value, 1=take/decrement semaphore value  
      (See CF User's Guide, B.26, p.62).
    - Then re-enable CF CH 1 deque
    - Finally re-enable CF CH 1 polling directories

   <B> Changed a TO table while a CF transfer was underway and there are now problems. </B>


   <I>Scenario:</I>

   Using CFDP for a transfer and PDUs are transferring then commaned TO to flush (empty) the TO channel used for the transfer.

   <I>Observables:</I>

    -  Possibility 1: No PDUs from CF anymore and Semaphore Count is 0 (for that channel).
                      If this is zero and there are no PDUs then CF is wedged.

    -  Possibility 2: One or more PDUs are missing and my Class 1 transfer is corrupted
                      (or my Class 2 transfer required retries).

    -  Possibility 3: The transfer completed but the CF Semaphore Count for that channel is no
                      longer the max value of 4 when there are no transactions.

    -  Possibility 4: Any of the above, together.

    <I>Root cause:</I>

   Similar to the scenario above, flushing the TO channel being used for an active transfer will cause PDUs to be
   dropped but the CF throttling semaphore does not get updated.  Recovery is similar to scenario above.

   <I>Recovery:</I>
    
    Next: \ref cfstofaqs <BR>
    Prev: \ref cfstotbl
**/

/**
    \page cfstofaqs TO Application Frequently Asked Questions

  General
  ====

  <B> (Q)
     What channels can be disabled and enabled?
  </B> <BR> <BR> <I>
     All the TO channels defined by the custom layer should startup and be enabled.
  </I>

  <B> (Q)
     When a new configuration table is loaded for a channel, are the channel's priority queues
     and message flows cleared?
  </B> <BR> <BR> <I>
     When a new configuration table is loaded the channel's priority queues and message flows are
     cleared, also any queued Software Bus messages are dequeued.
  </I>
  
  <B> (Q)
     Are the configuration tables all load ONLY, and dump files all dump ONLY? Are any Load/Dump?
  </B> <BR> <BR> <I>
     The TO dump tables are dump only.  The TO configuration tables are dump and load.  The TO configuration 
     table is load(ed) with a particular configuration, but the table parameter values after it's loaded can 
     be modified by a command. Then that updated version of that table can be dumped to a file.  
     If the user likes those changes, that table can be reloaded.
  </I>

**/
