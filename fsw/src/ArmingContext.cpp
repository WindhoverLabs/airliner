//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Arming.sm
//

#include "Arming.h"
#include "ArmingContext.h"

using namespace statemap;

// Static class declarations.
ArmingMap_Init ArmingMap::Init("ArmingMap::Init", 0);
ArmingMap_Standby ArmingMap::Standby("ArmingMap::Standby", 1);
ArmingMap_Armed ArmingMap::Armed("ArmingMap::Armed", 2);
ArmingMap_StandbyError ArmingMap::StandbyError("ArmingMap::StandbyError", 3);
ArmingMap_ArmedError ArmingMap::ArmedError("ArmingMap::ArmedError", 4);

void ArmingState::evArm(ArmingContext& context)
{
    Default(context);
}

void ArmingState::evDisarm(ArmingContext& context)
{
    Default(context);
}

void ArmingState::evError(ArmingContext& context)
{
    Default(context);
}

void ArmingState::evInitComplete(ArmingContext& context)
{
    Default(context);
}

void ArmingState::Default(ArmingContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void ArmingMap_Init::evInitComplete(ArmingContext& context)
{
    Arming& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.EnteredStandby();
        context.setState(ArmingMap::Standby);
    }
    catch (...)
    {
        context.setState(ArmingMap::Standby);
        throw;
    }
    context.getState().Entry(context);

}

void ArmingMap_Standby::evArm(ArmingContext& context)
{
    Arming& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.EnteredArmed();
        context.setState(ArmingMap::Armed);
    }
    catch (...)
    {
        context.setState(ArmingMap::Armed);
        throw;
    }
    context.getState().Entry(context);

}

void ArmingMap_Standby::evError(ArmingContext& context)
{
    Arming& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.EnteredStandbyError();
        context.setState(ArmingMap::StandbyError);
    }
    catch (...)
    {
        context.setState(ArmingMap::StandbyError);
        throw;
    }
    context.getState().Entry(context);

}

void ArmingMap_Armed::evDisarm(ArmingContext& context)
{
    Arming& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.EnteredStandby();
        context.setState(ArmingMap::Standby);
    }
    catch (...)
    {
        context.setState(ArmingMap::Standby);
        throw;
    }
    context.getState().Entry(context);

}

void ArmingMap_Armed::evError(ArmingContext& context)
{
    Arming& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.EnteredArmedError();
        context.setState(ArmingMap::ArmedError);
    }
    catch (...)
    {
        context.setState(ArmingMap::ArmedError);
        throw;
    }
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
