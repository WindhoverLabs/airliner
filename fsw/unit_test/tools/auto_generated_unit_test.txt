void Test_Matrix10F2_Mult_2F10_Random(void)
{
    int i, j = 0;

    math::Matrix10F2 A (
        {0.296138, -0.033921},
        {0.995268, 0.672015},
        {-0.827637, -0.121672},
        {0.603040, 0.058004},
        {0.047949, -0.718685},
        {0.606029, -0.656754},
        {-0.554683, -0.448961},
        {0.791282, -0.916950},
        {-0.963857, 0.781365},
        {-0.763308, -0.299853}
    );

    math::Matrix2F10 B (
        {-0.878910, 0.134400, 0.879692, 0.783023, -0.243432, -0.986075, 0.625898, 0.739394, -0.818416, -0.829002},
        {-0.397717, 0.378846, 0.994759, 0.759892, 0.394848, -0.138801, -0.849503, -0.864000, -0.941999, 0.720487}
    );

    math::Matrix10F10 expected (
        {-0.246787, 0.026950, 0.226767, 0.206106, -0.085483, -0.287306, 0.214168, 0.248270, -0.210410, -0.269938},
        {-1.142023, 0.388355, 1.544023, 1.289977, 0.023064, -1.074686, 0.052058, 0.155275, -1.447581, -0.340902},
        {0.775810, -0.157329, -0.849100, -0.740516, 0.153432, 0.833001, -0.414656, -0.506826, 0.791966, 0.598451},
        {-0.553087, 0.103023, 0.588189, 0.516271, -0.123897, -0.602694, 0.328167, 0.395769, -0.548177, -0.458131},
        {0.243690, -0.265827, -0.672738, -0.508578, -0.295444, 0.052473, 0.640536, 0.656397, 0.637759, -0.557552},
        {-0.271443, -0.167358, -0.120193, -0.024528, -0.406845, -0.506432, 0.937227, 1.015530, 0.122678, -0.975582},
        {0.666076, -0.244637, -0.934559, -0.775492, -0.042244, 0.609276, 0.034219, -0.022227, 0.876883, 0.136363},
        {-0.330779, -0.241035, -0.216060, -0.077192, -0.554680, -0.652990, 1.274214, 1.377314, 0.216169, -1.316625},
        {0.536382, 0.166475, -0.070627, -0.160968, 0.543155, 0.841981, -1.267048, -1.387770, 0.052790, 1.362003},
        {0.790136, -0.216187, -0.969758, -0.825544, 0.067417, 0.794299, -0.223027, -0.305313, 0.907165, 0.416744}
    );

    math::Matrix10F10 result;
    result.Zero();

    result = A * B;

    for(i = 0; i < 10; i++)
    {
        for(j = 0; j < 10; j++)
        {
            UtAssert_True(fabs(result[i][j] - expected[i][j]) < 0.00001f, "fabs(result[i][j] - expected[i][j]) < 0.00001f");

        }
    }
}
