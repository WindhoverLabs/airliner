// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy
// of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an
// "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s):
//
// State Machine
//    AppClass
//
// Description
//  This state machine is recognizes the regular expression wcw(r) or
//  palindromes.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.9  2009/03/28 11:56:00  cwrapp
// Corrected keyword misspelling.
//
// Revision 1.8  2009/03/27 09:41:46  cwrapp
// Added F. Perrad changes back in.
//
// Revision 1.7  2008/08/16 15:27:18  fperrad
// + EX3 uses 'jump' when the end state is in another map
//
// Revision 1.6  2008/08/02 09:59:58  fperrad
// + EX3 : start by the StartMap
//
// Revision 1.5  2005/06/03 19:58:28  cwrapp
// Further updates for release 4.0.0
//
// Revision 1.4  2005/05/28 13:51:24  cwrapp
// Update Java examples 1 - 7.
//
// Revision 1.1  2004/05/31 13:41:22  charlesr
// Modified emacs comment.
//
// Revision 1.0  2003/12/14 19:58:18  charlesr
// Initial revision
//

%start StartMap::PushIt
%class AppClass

%map StartMap
%%
// State    Transition      End State               Action(s)
PushIt
{
            Zero            push(ZerosMap::PushIt)  {}
            One             push(OnesMap::PushIt)   {}
            C               PopIt                   {}
            OK              PopIt                   {}
            Error           Unacceptable            {}
}

PopIt
{
            EOS             Acceptable              {Acceptable();}
            Default         Unacceptable            {}
}

Acceptable
{}

Unacceptable
{
            Default         nil                     {}
}

Default
{
            EOS             Unacceptable            {Unacceptable();}
            Unknown         Unacceptable            {}
}
%%

%map ZerosMap
%%
// State    Transition      End State               Action(s)
PushIt
{
            Zero            push(PushIt)            {}
            One             push(OnesMap::PushIt)   {}
            C               PopIt                   {}
            OK              PopIt                   {}
            Error           jump(StartMap::Unacceptable)
                                                    {emptyStateStack();}
}

PopIt
{
            Zero            pop(OK)                 {}
            Default         pop(Error)              {}
}

Default
{
            EOS             jump(StartMap::Unacceptable)
                                                    {
                                                        emptyStateStack();
                                                        Unacceptable();
                                                    }
            Unknown         jump(StartMap::Unacceptable)
                                                    {emptyStateStack();}
}
%%

%map OnesMap
%%
// State    Transition      End State               Action(s)
PushIt
{
            Zero            push(ZerosMap::PushIt)  {}
            One             push(PushIt)            {}
            C               PopIt                   {}
            OK              PopIt                   {}
            Error           jump(StartMap::Unacceptable)
                                                    {emptyStateStack();}
}

PopIt
{
            One             pop(OK)                 {}
            Default         pop(Error)              {}
}

Default
{
            EOS             jump(StartMap::Unacceptable)
                                                    {
                                                        emptyStateStack();
                                                        Unacceptable();
                                                    }
            Unknown         jump(StartMap::Unacceptable) 
                                                    {emptyStateStack();}
}
%%
