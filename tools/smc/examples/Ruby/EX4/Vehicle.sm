// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s):
//      Port to Ruby by Francois Perrad, francois.perrad@gadz.org
//
// Vehicle --
//
//  This state machine moves the vehicle along the road, obeying
//  the traffic light along the way.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.1  2005/06/16 17:52:03  fperrad
// Added Ruby examples 1 - 4 and 7.
//
//

%start VehicleMap::Stopped
%class Vehicle
%package Smc_ex4

%map VehicleMap
%%
Stopped
{
    Start               Moving          {SetTimer();}

    Stop                nil             {}
    Pause               nil             {}
    Continue            nil             {}
}

Moving
{
    KeepGoing           nil             {Move(); SetTimer();}
    LightRed            AtLight         {RegisterWithLight();}
    TripDone            Done            {SelfDestruct();}
}

AtLight
{
    LightGreen          Moving          {Move(); SetTimer();}
}

Done
{}

Default
{
    KeepGoing           nil             {}
    LightGreen          nil             {}
    LightRed            Stopped         {}
    TripDone            Done            {}

    Start               nil             {}
    Pause               push(PauseMap2::Paused) {}
    Continue            nil             {}
    Stop                Stopped         {StopTimer();}
}
%%

%map PauseMap2
%%
Paused
{
    Continue            pop(Continue)   {}
    KeepGoing           KeepGoing       {}
    LightGreen          LightGreen      {}
    LightRed            LightRed        {}
    TripDone            TripDone        {}
}

KeepGoing
{
    Continue            pop(KeepGoing)  {}
}

LightGreen
{
    Continue            pop(LightGreen) {}
}

LightRed
{
    Continue            pop(LightRed)   {}
}

TripDone
{
    Continue            pop(TripDone)   {}
}

Default
{
    Start               nil             {}
    Pause               nil             {}
    Stop                pop(Stop)       {}

    KeepGoing           nil             {}
    LightGreen          nil             {}
    LightRed            nil             {}
    TripDone            nil             {}
}
%%
