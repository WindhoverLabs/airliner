// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// Stoplight --
//
//  This state machine changes the stop lights.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.5  2005/05/28 18:02:56  cwrapp
// Updated Tcl examples, removed EX6.
//
// Revision 1.0  2003/12/14 20:30:22  charlesr
// Initial revision
//

%start StopMap::Stopped
%class Stoplight
%package tcl_ex4

%map StopMap
%%
Stopped {
    Start               EastWestGreen       {
											  TurnLight(NSLIGHT RED);
											  TurnLight(EWLIGHT GREEN);
											  SetTimer(EWGreenTimer);
											}

    // Ignore pause, continue and stop becuase we ain't running.
    Pause               nil                 {}
    Continue            nil                 {}
    Stop                nil                 {}
}

EastWestGreen {
	Timeout				EastWestYellow		{
											  TurnLight(EWLIGHT YELLOW);
											  SetTimer(YellowTimer);
											}
}

EastWestYellow {
	Timeout				NorthSouthGreen		{
											  TurnLight(EWLIGHT RED);
											  TurnLight(NSLIGHT GREEN);
											  InformVehicles(north);
											  InformVehicles(south);
											  SetTimer(NSGreenTimer);
											}
}

NorthSouthGreen {
	Timeout				NorthSouthYellow	{
											  TurnLight(NSLIGHT YELLOW);
											  SetTimer(YellowTimer);
											}
}

NorthSouthYellow {
	Timeout				EastWestGreen		{
											  TurnLight(NSLIGHT RED);
											  TurnLight(EWLIGHT GREEN);
											  InformVehicles(east);
											  InformVehicles(west);
											  SetTimer(EWGreenTimer);
											}
}

Default {
    // Ignore start because this object is already running.
    Start               nil                 {}
    Continue            nil                 {}

    // Don't stop timers. Let them expire. The pause map will
    // catch them and pass them back when popped.
    Pause               push(PauseMap::Paused) {}

    // Stop timers because this demo is stopping.
    Stop                Stopped             {
											  StopTimer();
                                              ResetLights();
											}
}
%%

%map PauseMap
%%
Paused {
    Timeout             PauseTimeout        {}

    Continue            pop(Continue)       {}
}

PauseTimeout {
    Continue            pop(Timeout)        {}
}

Default {
    // Ignore start and pause.
    Start               nil                 {}
    Pause               nil                 {}

    Stop                pop(Stop)           {}
}
%%
