// -*- mode: text; tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2004. Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s):
//   Eitan Suez contributed examples/Ant.
//   (Name withheld) contributed the C# code generation and
//   examples/C#.
//
// State Machine
//	AppClass
//
// Description
//  This state machine is recognizes the regular expression wcw(r) or
//  palindromes.
//
// RCS ID
// Id: AppClass.sm,v 1.4 2008/08/16 15:26:45 fperrad Exp
//
// CHANGE LOG
// Log: AppClass.sm,v
// Revision 1.4  2008/08/16 15:26:45  fperrad
// + EX3 uses 'jump' when the end state is in another map
//
// Revision 1.3  2008/08/02 09:59:57  fperrad
// + EX3 : start by the StartMap
//
// Revision 1.2  2005/06/03 19:58:28  cwrapp
// Further updates for release 4.0.0
//
// Revision 1.1  2005/05/28 13:05:17  cwrapp
// Added CSharp examples 1 - 3.
//
// Revision 1.0  2004/09/01 17:34:54  charlesr
// Initial revision
//

%start StartMap::PushIt
%class AppClass

%map StartMap
%%
// State	Transition		End State           Action(s)
PushIt
{
			Zero			push(ZerosMap::PushIt)		{}
			One				push(OnesMap::PushIt)		{}
			C				PopIt					{}
			OK				PopIt					{}
			Error			Unacceptable		{}
}

PopIt
{
			EOS				Acceptable			{Acceptable();}
			Default			Unacceptable		{}
}

Acceptable {}

Unacceptable {
		 	Default			nil					{}
}

Default {
			EOS				Unacceptable		{Unacceptable();}
			Unknown			Unacceptable		{}
}
%%

%map ZerosMap
%%
// State	Transition		End State           Action(s)
PushIt {
        	Zero			push(PushIt)        {}
			One				push(OnesMap::PushIt) {}
			C				PopIt				{}
			OK				PopIt				{}
			Error			jump(StartMap::Unacceptable) {EmptyStateStack();}
}

PopIt {
			Zero			pop(OK)				{}
			Default			pop(Error)			{}
}

Default {
			EOS				jump(StartMap::Unacceptable)  {
                                                EmptyStateStack();
                                                Unacceptable();
                                                }
			Unknown			jump(StartMap::Unacceptable)  {EmptyStateStack();}
}
%%

%map OnesMap
%%
// State	Transition		End State           Action(s)
PushIt {
			Zero			push(ZerosMap::PushIt)	{}
			One				push(PushIt)            {}
			C				PopIt					{}
			OK				PopIt					{}
			Error			jump(StartMap::Unacceptable)  {EmptyStateStack();}
}

PopIt {
			One				pop(OK)				{}
			Default			pop(Error)			{}
}

Default {
			EOS				jump(StartMap::Unacceptable)  {
                                                EmptyStateStack();
                                                Unacceptable();
                                                }
			Unknown			jump(StartMap::Unacceptable)	{EmptyStateStack();}
}
%%
