// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy
// of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an
// "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2005 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s):
//
// State Machine
//	AppClass
//
// Description
//  This state machine is recognizes the regular expression wcw(r) or
//  palindromes.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.4  2008/08/16 15:25:07  fperrad
// + EX3 uses 'jump' when the end state is in another map
//
// Revision 1.3  2007/08/05 13:32:04  cwrapp
// Version 5.0.1 check-in. See net/sf/smc/CODE_README.txt for more information.
//
// Revision 1.2  2005/06/03 19:58:28  cwrapp
// Further updates for release 4.0.0
//
// Revision 1.1  2005/05/28 12:49:21  cwrapp
// Added Ant examples 1 - 7.
//
// Revision 1.0  2004/05/31 12:59:39  charlesr
// Initial revision
//
// Revision 1.0  2003/12/14 19:58:18  charlesr
// Initial revision
//

%start Map3::PushIt
%class AppClass

%map ZerosMap
%%
// State	Transition		End State           Action(s)
PushIt
{
        	Zero			push(PushIt)        {}
			One				push(OnesMap::PushIt)	{}
			C				PopIt				{}
			OK				PopIt				{}
			Error			jump(Map3::Unacceptable)  {emptyStateStack();}
}

PopIt
{
			Zero			pop(OK)				{}
			Default			pop(Error)			{}
}

Default
{
			EOS				jump(Map3::Unacceptable)  {
                                                emptyStateStack();
                                                Unacceptable();
                                                }
			Unknown			jump(Map3::Unacceptable)  {emptyStateStack();}
}
%%

%map OnesMap
%%
// State	Transition		End State           Action(s)
PushIt
{
			Zero			push(ZerosMap::PushIt)	{}
			One				push(PushIt)        {}
			C				PopIt				{}
			OK				PopIt				{}
			Error			jump(Map3::Unacceptable)  {emptyStateStack();}
}

PopIt {
			One				pop(OK)				{}
			Default			pop(Error)			{}
}

Default
{
			EOS				jump(Map3::Unacceptable)  {
                                                emptyStateStack();
                                                Unacceptable();
                                                }
			Unknown			jump(Map3::Unacceptable)	{emptyStateStack();}
}
%%

%map Map3
%%
// State	Transition		End State           Action(s)
PushIt
{
			Zero			push(ZerosMap::PushIt)	{}
			One				push(OnesMap::PushIt)	{}
			C				PopIt				{}
			OK				PopIt				{}
			Error			Unacceptable		{}
}

PopIt
{
			EOS				Acceptable			{Acceptable();}
			Default			Unacceptable		{}
}

Acceptable
{}

Unacceptable
{
		 	Default			nil					{}
}

Default
{
			EOS				Unacceptable		{Unacceptable();}
			Unknown			Unacceptable		{}
}

%%
