// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s):
//      Port to Lua by Francois Perrad, francois.perrad@gadz.org
//
// State Machine
//	AppClass
//
// Description
//  This state machine is recognizes the regular expression wcw(r) or
//  palindromes.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.3  2008/08/16 15:27:35  fperrad
// + EX3 uses 'jump' when the end state is in another map
//
// Revision 1.2  2008/08/02 09:59:58  fperrad
// + EX3 : start by the StartMap
//
// Revision 1.1  2007/01/03 15:42:33  fperrad
// + Added Lua examples 1 - 3.
//
//
//

%start StartMap::PushIt
%class AppClass

%map StartMap
%%
// State	Transition		End State           Action(s)
PushIt {
			Zero			push(ZerosMap::PushIt)		{}
			One				push(OnesMap::PushIt)		{}
			C				PopIt					{}
			OK				PopIt					{}
			Error			Unacceptable		{}
}

PopIt {
			EOS				Acceptable			{Acceptable();}
			Default			Unacceptable		{}
}

Acceptable {}

Unacceptable {
		 	Default			nil					{}
}

Default {
			EOS				Unacceptable		{Unacceptable();}
			Unknown			Unacceptable		{}
}
%%

%map ZerosMap
%%
// State	Transition		End State           Action(s)
PushIt {
        	Zero			push(PushIt)            {}
			One				push(OnesMap::PushIt)		{}
			C				PopIt					{}
			OK				PopIt					{}
			Error			jump(StartMap::Unacceptable)  {emptyStateStack();}
}

PopIt {
			Zero			pop(OK)				{}
			Default			pop(Error)			{}
}

Default {
			EOS				jump(StartMap::Unacceptable)  {
                                                emptyStateStack();
                                                Unacceptable();
                                                }
			Unknown			jump(StartMap::Unacceptable)  {emptyStateStack();}
}
%%

%map OnesMap
%%
// State	Transition		End State           Action(s)
PushIt {
			Zero			push(ZerosMap::PushIt)		{}
			One				push(PushIt)            {}
			C				PopIt					{}
			OK				PopIt					{}
			Error			jump(StartMap::Unacceptable)  {emptyStateStack();}
}

PopIt {
			One				pop(OK)				{}
			Default			pop(Error)			{}
}

Default {
			EOS				jump(StartMap::Unacceptable)  {
                                                emptyStateStack();
                                                Unacceptable();
                                                }
			Unknown			jump(StartMap::Unacceptable)	{emptyStateStack();}
}
%%
